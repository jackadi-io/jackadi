// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: internal/proto/api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	API_ListAgents_FullMethodName  = "/proto.API/ListAgents"
	API_AcceptAgent_FullMethodName = "/proto.API/AcceptAgent"
	API_RemoveAgent_FullMethodName = "/proto.API/RemoveAgent"
	API_RejectAgent_FullMethodName = "/proto.API/RejectAgent"
	API_GetResults_FullMethodName  = "/proto.API/GetResults"
	API_ListResults_FullMethodName = "/proto.API/ListResults"
	API_GetRequest_FullMethodName  = "/proto.API/GetRequest"
)

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIClient interface {
	ListAgents(ctx context.Context, in *ListAgentsRequest, opts ...grpc.CallOption) (*ListAgentsResponse, error)
	AcceptAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentResponse, error)
	RemoveAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentsResponse, error)
	RejectAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentsResponse, error)
	GetResults(ctx context.Context, in *ResultsRequest, opts ...grpc.CallOption) (*ResultsResponse, error)
	ListResults(ctx context.Context, in *ListResultsRequest, opts ...grpc.CallOption) (*ListResultsResponse, error)
	GetRequest(ctx context.Context, in *RequestRequest, opts ...grpc.CallOption) (*RequestResponse, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) ListAgents(ctx context.Context, in *ListAgentsRequest, opts ...grpc.CallOption) (*ListAgentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAgentsResponse)
	err := c.cc.Invoke(ctx, API_ListAgents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) AcceptAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentResponse)
	err := c.cc.Invoke(ctx, API_AcceptAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) RemoveAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentsResponse)
	err := c.cc.Invoke(ctx, API_RemoveAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) RejectAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentsResponse)
	err := c.cc.Invoke(ctx, API_RejectAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetResults(ctx context.Context, in *ResultsRequest, opts ...grpc.CallOption) (*ResultsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResultsResponse)
	err := c.cc.Invoke(ctx, API_GetResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListResults(ctx context.Context, in *ListResultsRequest, opts ...grpc.CallOption) (*ListResultsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResultsResponse)
	err := c.cc.Invoke(ctx, API_ListResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetRequest(ctx context.Context, in *RequestRequest, opts ...grpc.CallOption) (*RequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestResponse)
	err := c.cc.Invoke(ctx, API_GetRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
// All implementations should embed UnimplementedAPIServer
// for forward compatibility.
type APIServer interface {
	ListAgents(context.Context, *ListAgentsRequest) (*ListAgentsResponse, error)
	AcceptAgent(context.Context, *AgentRequest) (*AgentResponse, error)
	RemoveAgent(context.Context, *AgentRequest) (*AgentsResponse, error)
	RejectAgent(context.Context, *AgentRequest) (*AgentsResponse, error)
	GetResults(context.Context, *ResultsRequest) (*ResultsResponse, error)
	ListResults(context.Context, *ListResultsRequest) (*ListResultsResponse, error)
	GetRequest(context.Context, *RequestRequest) (*RequestResponse, error)
}

// UnimplementedAPIServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAPIServer struct{}

func (UnimplementedAPIServer) ListAgents(context.Context, *ListAgentsRequest) (*ListAgentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgents not implemented")
}
func (UnimplementedAPIServer) AcceptAgent(context.Context, *AgentRequest) (*AgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptAgent not implemented")
}
func (UnimplementedAPIServer) RemoveAgent(context.Context, *AgentRequest) (*AgentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAgent not implemented")
}
func (UnimplementedAPIServer) RejectAgent(context.Context, *AgentRequest) (*AgentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectAgent not implemented")
}
func (UnimplementedAPIServer) GetResults(context.Context, *ResultsRequest) (*ResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResults not implemented")
}
func (UnimplementedAPIServer) ListResults(context.Context, *ListResultsRequest) (*ListResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResults not implemented")
}
func (UnimplementedAPIServer) GetRequest(context.Context, *RequestRequest) (*RequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequest not implemented")
}
func (UnimplementedAPIServer) testEmbeddedByValue() {}

// UnsafeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServer will
// result in compilation errors.
type UnsafeAPIServer interface {
	mustEmbedUnimplementedAPIServer()
}

func RegisterAPIServer(s grpc.ServiceRegistrar, srv APIServer) {
	// If the following call pancis, it indicates UnimplementedAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&API_ServiceDesc, srv)
}

func _API_ListAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ListAgents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListAgents(ctx, req.(*ListAgentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_AcceptAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).AcceptAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_AcceptAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).AcceptAgent(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_RemoveAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).RemoveAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_RemoveAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).RemoveAgent(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_RejectAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).RejectAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_RejectAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).RejectAgent(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_GetResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetResults(ctx, req.(*ResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ListResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListResults(ctx, req.(*ListResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_GetRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetRequest(ctx, req.(*RequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// API_ServiceDesc is the grpc.ServiceDesc for API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAgents",
			Handler:    _API_ListAgents_Handler,
		},
		{
			MethodName: "AcceptAgent",
			Handler:    _API_AcceptAgent_Handler,
		},
		{
			MethodName: "RemoveAgent",
			Handler:    _API_RemoveAgent_Handler,
		},
		{
			MethodName: "RejectAgent",
			Handler:    _API_RejectAgent_Handler,
		},
		{
			MethodName: "GetResults",
			Handler:    _API_GetResults_Handler,
		},
		{
			MethodName: "ListResults",
			Handler:    _API_ListResults_Handler,
		},
		{
			MethodName: "GetRequest",
			Handler:    _API_GetRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/api.proto",
}
