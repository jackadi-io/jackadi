// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: internal/proto/msg.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Comm_Handshake_FullMethodName        = "/proto.Comm/Handshake"
	Comm_ExecTask_FullMethodName         = "/proto.Comm/ExecTask"
	Comm_ListAgentPlugins_FullMethodName = "/proto.Comm/ListAgentPlugins"
)

// CommClient is the client API for Comm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommClient interface {
	Handshake(ctx context.Context, in *HandshakeRequest, opts ...grpc.CallOption) (*HandshakeResponse, error)
	ExecTask(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TaskResponse, TaskRequest], error)
	ListAgentPlugins(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAgentPluginsResponse, error)
}

type commClient struct {
	cc grpc.ClientConnInterface
}

func NewCommClient(cc grpc.ClientConnInterface) CommClient {
	return &commClient{cc}
}

func (c *commClient) Handshake(ctx context.Context, in *HandshakeRequest, opts ...grpc.CallOption) (*HandshakeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandshakeResponse)
	err := c.cc.Invoke(ctx, Comm_Handshake_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commClient) ExecTask(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TaskResponse, TaskRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Comm_ServiceDesc.Streams[0], Comm_ExecTask_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TaskResponse, TaskRequest]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Comm_ExecTaskClient = grpc.BidiStreamingClient[TaskResponse, TaskRequest]

func (c *commClient) ListAgentPlugins(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAgentPluginsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAgentPluginsResponse)
	err := c.cc.Invoke(ctx, Comm_ListAgentPlugins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommServer is the server API for Comm service.
// All implementations should embed UnimplementedCommServer
// for forward compatibility.
type CommServer interface {
	Handshake(context.Context, *HandshakeRequest) (*HandshakeResponse, error)
	ExecTask(grpc.BidiStreamingServer[TaskResponse, TaskRequest]) error
	ListAgentPlugins(context.Context, *emptypb.Empty) (*ListAgentPluginsResponse, error)
}

// UnimplementedCommServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommServer struct{}

func (UnimplementedCommServer) Handshake(context.Context, *HandshakeRequest) (*HandshakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handshake not implemented")
}
func (UnimplementedCommServer) ExecTask(grpc.BidiStreamingServer[TaskResponse, TaskRequest]) error {
	return status.Errorf(codes.Unimplemented, "method ExecTask not implemented")
}
func (UnimplementedCommServer) ListAgentPlugins(context.Context, *emptypb.Empty) (*ListAgentPluginsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentPlugins not implemented")
}
func (UnimplementedCommServer) testEmbeddedByValue() {}

// UnsafeCommServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommServer will
// result in compilation errors.
type UnsafeCommServer interface {
	mustEmbedUnimplementedCommServer()
}

func RegisterCommServer(s grpc.ServiceRegistrar, srv CommServer) {
	// If the following call pancis, it indicates UnimplementedCommServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Comm_ServiceDesc, srv)
}

func _Comm_Handshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandshakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServer).Handshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comm_Handshake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServer).Handshake(ctx, req.(*HandshakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comm_ExecTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CommServer).ExecTask(&grpc.GenericServerStream[TaskResponse, TaskRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Comm_ExecTaskServer = grpc.BidiStreamingServer[TaskResponse, TaskRequest]

func _Comm_ListAgentPlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServer).ListAgentPlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comm_ListAgentPlugins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServer).ListAgentPlugins(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Comm_ServiceDesc is the grpc.ServiceDesc for Comm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Comm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Comm",
	HandlerType: (*CommServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handshake",
			Handler:    _Comm_Handshake_Handler,
		},
		{
			MethodName: "ListAgentPlugins",
			Handler:    _Comm_ListAgentPlugins_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecTask",
			Handler:       _Comm_ExecTask_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/proto/msg.proto",
}

const (
	Forwarder_ExecTask_FullMethodName = "/proto.Forwarder/ExecTask"
)

// ForwarderClient is the client API for Forwarder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForwarderClient interface {
	ExecTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*FwdResponse, error)
}

type forwarderClient struct {
	cc grpc.ClientConnInterface
}

func NewForwarderClient(cc grpc.ClientConnInterface) ForwarderClient {
	return &forwarderClient{cc}
}

func (c *forwarderClient) ExecTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*FwdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FwdResponse)
	err := c.cc.Invoke(ctx, Forwarder_ExecTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForwarderServer is the server API for Forwarder service.
// All implementations should embed UnimplementedForwarderServer
// for forward compatibility.
type ForwarderServer interface {
	ExecTask(context.Context, *TaskRequest) (*FwdResponse, error)
}

// UnimplementedForwarderServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedForwarderServer struct{}

func (UnimplementedForwarderServer) ExecTask(context.Context, *TaskRequest) (*FwdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecTask not implemented")
}
func (UnimplementedForwarderServer) testEmbeddedByValue() {}

// UnsafeForwarderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForwarderServer will
// result in compilation errors.
type UnsafeForwarderServer interface {
	mustEmbedUnimplementedForwarderServer()
}

func RegisterForwarderServer(s grpc.ServiceRegistrar, srv ForwarderServer) {
	// If the following call pancis, it indicates UnimplementedForwarderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Forwarder_ServiceDesc, srv)
}

func _Forwarder_ExecTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwarderServer).ExecTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forwarder_ExecTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwarderServer).ExecTask(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Forwarder_ServiceDesc is the grpc.ServiceDesc for Forwarder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Forwarder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Forwarder",
	HandlerType: (*ForwarderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecTask",
			Handler:    _Forwarder_ExecTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/msg.proto",
}
