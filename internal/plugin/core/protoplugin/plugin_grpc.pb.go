// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: internal/plugin/protoplugin/plugin.proto

package protoplugin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PluginCollection_Name_FullMethodName            = "/protoplugin.PluginCollection/Name"
	PluginCollection_Tasks_FullMethodName           = "/protoplugin.PluginCollection/Tasks"
	PluginCollection_Help_FullMethodName            = "/protoplugin.PluginCollection/Help"
	PluginCollection_Version_FullMethodName         = "/protoplugin.PluginCollection/Version"
	PluginCollection_Do_FullMethodName              = "/protoplugin.PluginCollection/Do"
	PluginCollection_CollectSpecs_FullMethodName    = "/protoplugin.PluginCollection/CollectSpecs"
	PluginCollection_GetTaskLockMode_FullMethodName = "/protoplugin.PluginCollection/GetTaskLockMode"
)

// PluginCollectionClient is the client API for PluginCollection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginCollectionClient interface {
	Name(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NameResponse, error)
	Tasks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TasksResponse, error)
	Help(ctx context.Context, in *HelpRequest, opts ...grpc.CallOption) (*HelpResponse, error)
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	Do(ctx context.Context, in *DoRequest, opts ...grpc.CallOption) (*DoResponse, error)
	CollectSpecs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CollectSpecsResponse, error)
	GetTaskLockMode(ctx context.Context, in *TaskLockModeRequest, opts ...grpc.CallOption) (*TaskLockModeResponse, error)
}

type pluginCollectionClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginCollectionClient(cc grpc.ClientConnInterface) PluginCollectionClient {
	return &pluginCollectionClient{cc}
}

func (c *pluginCollectionClient) Name(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NameResponse)
	err := c.cc.Invoke(ctx, PluginCollection_Name_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginCollectionClient) Tasks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TasksResponse)
	err := c.cc.Invoke(ctx, PluginCollection_Tasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginCollectionClient) Help(ctx context.Context, in *HelpRequest, opts ...grpc.CallOption) (*HelpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelpResponse)
	err := c.cc.Invoke(ctx, PluginCollection_Help_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginCollectionClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, PluginCollection_Version_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginCollectionClient) Do(ctx context.Context, in *DoRequest, opts ...grpc.CallOption) (*DoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DoResponse)
	err := c.cc.Invoke(ctx, PluginCollection_Do_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginCollectionClient) CollectSpecs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CollectSpecsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectSpecsResponse)
	err := c.cc.Invoke(ctx, PluginCollection_CollectSpecs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginCollectionClient) GetTaskLockMode(ctx context.Context, in *TaskLockModeRequest, opts ...grpc.CallOption) (*TaskLockModeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskLockModeResponse)
	err := c.cc.Invoke(ctx, PluginCollection_GetTaskLockMode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginCollectionServer is the server API for PluginCollection service.
// All implementations should embed UnimplementedPluginCollectionServer
// for forward compatibility.
type PluginCollectionServer interface {
	Name(context.Context, *emptypb.Empty) (*NameResponse, error)
	Tasks(context.Context, *emptypb.Empty) (*TasksResponse, error)
	Help(context.Context, *HelpRequest) (*HelpResponse, error)
	Version(context.Context, *emptypb.Empty) (*VersionResponse, error)
	Do(context.Context, *DoRequest) (*DoResponse, error)
	CollectSpecs(context.Context, *emptypb.Empty) (*CollectSpecsResponse, error)
	GetTaskLockMode(context.Context, *TaskLockModeRequest) (*TaskLockModeResponse, error)
}

// UnimplementedPluginCollectionServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPluginCollectionServer struct{}

func (UnimplementedPluginCollectionServer) Name(context.Context, *emptypb.Empty) (*NameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Name not implemented")
}
func (UnimplementedPluginCollectionServer) Tasks(context.Context, *emptypb.Empty) (*TasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tasks not implemented")
}
func (UnimplementedPluginCollectionServer) Help(context.Context, *HelpRequest) (*HelpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Help not implemented")
}
func (UnimplementedPluginCollectionServer) Version(context.Context, *emptypb.Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedPluginCollectionServer) Do(context.Context, *DoRequest) (*DoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Do not implemented")
}
func (UnimplementedPluginCollectionServer) CollectSpecs(context.Context, *emptypb.Empty) (*CollectSpecsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectSpecs not implemented")
}
func (UnimplementedPluginCollectionServer) GetTaskLockMode(context.Context, *TaskLockModeRequest) (*TaskLockModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskLockMode not implemented")
}
func (UnimplementedPluginCollectionServer) testEmbeddedByValue() {}

// UnsafePluginCollectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginCollectionServer will
// result in compilation errors.
type UnsafePluginCollectionServer interface {
	mustEmbedUnimplementedPluginCollectionServer()
}

func RegisterPluginCollectionServer(s grpc.ServiceRegistrar, srv PluginCollectionServer) {
	// If the following call pancis, it indicates UnimplementedPluginCollectionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PluginCollection_ServiceDesc, srv)
}

func _PluginCollection_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginCollectionServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginCollection_Name_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginCollectionServer).Name(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginCollection_Tasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginCollectionServer).Tasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginCollection_Tasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginCollectionServer).Tasks(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginCollection_Help_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginCollectionServer).Help(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginCollection_Help_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginCollectionServer).Help(ctx, req.(*HelpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginCollection_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginCollectionServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginCollection_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginCollectionServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginCollection_Do_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginCollectionServer).Do(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginCollection_Do_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginCollectionServer).Do(ctx, req.(*DoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginCollection_CollectSpecs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginCollectionServer).CollectSpecs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginCollection_CollectSpecs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginCollectionServer).CollectSpecs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginCollection_GetTaskLockMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskLockModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginCollectionServer).GetTaskLockMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginCollection_GetTaskLockMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginCollectionServer).GetTaskLockMode(ctx, req.(*TaskLockModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginCollection_ServiceDesc is the grpc.ServiceDesc for PluginCollection service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginCollection_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protoplugin.PluginCollection",
	HandlerType: (*PluginCollectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Name",
			Handler:    _PluginCollection_Name_Handler,
		},
		{
			MethodName: "Tasks",
			Handler:    _PluginCollection_Tasks_Handler,
		},
		{
			MethodName: "Help",
			Handler:    _PluginCollection_Help_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _PluginCollection_Version_Handler,
		},
		{
			MethodName: "Do",
			Handler:    _PluginCollection_Do_Handler,
		},
		{
			MethodName: "CollectSpecs",
			Handler:    _PluginCollection_CollectSpecs_Handler,
		},
		{
			MethodName: "GetTaskLockMode",
			Handler:    _PluginCollection_GetTaskLockMode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/plugin/protoplugin/plugin.proto",
}
