// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: internal/plugin/core/protoplugin/plugin.proto

package protoplugin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	JackadiPlugin_Name_FullMethodName            = "/protoplugin.JackadiPlugin/Name"
	JackadiPlugin_Tasks_FullMethodName           = "/protoplugin.JackadiPlugin/Tasks"
	JackadiPlugin_Help_FullMethodName            = "/protoplugin.JackadiPlugin/Help"
	JackadiPlugin_Version_FullMethodName         = "/protoplugin.JackadiPlugin/Version"
	JackadiPlugin_Do_FullMethodName              = "/protoplugin.JackadiPlugin/Do"
	JackadiPlugin_CollectSpecs_FullMethodName    = "/protoplugin.JackadiPlugin/CollectSpecs"
	JackadiPlugin_GetTaskLockMode_FullMethodName = "/protoplugin.JackadiPlugin/GetTaskLockMode"
)

// JackadiPluginClient is the client API for JackadiPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JackadiPluginClient interface {
	Name(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NameResponse, error)
	Tasks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TasksResponse, error)
	Help(ctx context.Context, in *HelpRequest, opts ...grpc.CallOption) (*HelpResponse, error)
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	Do(ctx context.Context, in *DoRequest, opts ...grpc.CallOption) (*DoResponse, error)
	CollectSpecs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CollectSpecsResponse, error)
	GetTaskLockMode(ctx context.Context, in *TaskLockModeRequest, opts ...grpc.CallOption) (*TaskLockModeResponse, error)
}

type jackadiPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewJackadiPluginClient(cc grpc.ClientConnInterface) JackadiPluginClient {
	return &jackadiPluginClient{cc}
}

func (c *jackadiPluginClient) Name(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NameResponse)
	err := c.cc.Invoke(ctx, JackadiPlugin_Name_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jackadiPluginClient) Tasks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TasksResponse)
	err := c.cc.Invoke(ctx, JackadiPlugin_Tasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jackadiPluginClient) Help(ctx context.Context, in *HelpRequest, opts ...grpc.CallOption) (*HelpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelpResponse)
	err := c.cc.Invoke(ctx, JackadiPlugin_Help_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jackadiPluginClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, JackadiPlugin_Version_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jackadiPluginClient) Do(ctx context.Context, in *DoRequest, opts ...grpc.CallOption) (*DoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DoResponse)
	err := c.cc.Invoke(ctx, JackadiPlugin_Do_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jackadiPluginClient) CollectSpecs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CollectSpecsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectSpecsResponse)
	err := c.cc.Invoke(ctx, JackadiPlugin_CollectSpecs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jackadiPluginClient) GetTaskLockMode(ctx context.Context, in *TaskLockModeRequest, opts ...grpc.CallOption) (*TaskLockModeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskLockModeResponse)
	err := c.cc.Invoke(ctx, JackadiPlugin_GetTaskLockMode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JackadiPluginServer is the server API for JackadiPlugin service.
// All implementations should embed UnimplementedJackadiPluginServer
// for forward compatibility.
type JackadiPluginServer interface {
	Name(context.Context, *emptypb.Empty) (*NameResponse, error)
	Tasks(context.Context, *emptypb.Empty) (*TasksResponse, error)
	Help(context.Context, *HelpRequest) (*HelpResponse, error)
	Version(context.Context, *emptypb.Empty) (*VersionResponse, error)
	Do(context.Context, *DoRequest) (*DoResponse, error)
	CollectSpecs(context.Context, *emptypb.Empty) (*CollectSpecsResponse, error)
	GetTaskLockMode(context.Context, *TaskLockModeRequest) (*TaskLockModeResponse, error)
}

// UnimplementedJackadiPluginServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJackadiPluginServer struct{}

func (UnimplementedJackadiPluginServer) Name(context.Context, *emptypb.Empty) (*NameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Name not implemented")
}
func (UnimplementedJackadiPluginServer) Tasks(context.Context, *emptypb.Empty) (*TasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tasks not implemented")
}
func (UnimplementedJackadiPluginServer) Help(context.Context, *HelpRequest) (*HelpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Help not implemented")
}
func (UnimplementedJackadiPluginServer) Version(context.Context, *emptypb.Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedJackadiPluginServer) Do(context.Context, *DoRequest) (*DoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Do not implemented")
}
func (UnimplementedJackadiPluginServer) CollectSpecs(context.Context, *emptypb.Empty) (*CollectSpecsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectSpecs not implemented")
}
func (UnimplementedJackadiPluginServer) GetTaskLockMode(context.Context, *TaskLockModeRequest) (*TaskLockModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskLockMode not implemented")
}
func (UnimplementedJackadiPluginServer) testEmbeddedByValue() {}

// UnsafeJackadiPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JackadiPluginServer will
// result in compilation errors.
type UnsafeJackadiPluginServer interface {
	mustEmbedUnimplementedJackadiPluginServer()
}

func RegisterJackadiPluginServer(s grpc.ServiceRegistrar, srv JackadiPluginServer) {
	// If the following call pancis, it indicates UnimplementedJackadiPluginServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&JackadiPlugin_ServiceDesc, srv)
}

func _JackadiPlugin_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JackadiPluginServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JackadiPlugin_Name_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JackadiPluginServer).Name(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JackadiPlugin_Tasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JackadiPluginServer).Tasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JackadiPlugin_Tasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JackadiPluginServer).Tasks(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JackadiPlugin_Help_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JackadiPluginServer).Help(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JackadiPlugin_Help_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JackadiPluginServer).Help(ctx, req.(*HelpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JackadiPlugin_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JackadiPluginServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JackadiPlugin_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JackadiPluginServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JackadiPlugin_Do_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JackadiPluginServer).Do(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JackadiPlugin_Do_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JackadiPluginServer).Do(ctx, req.(*DoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JackadiPlugin_CollectSpecs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JackadiPluginServer).CollectSpecs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JackadiPlugin_CollectSpecs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JackadiPluginServer).CollectSpecs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JackadiPlugin_GetTaskLockMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskLockModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JackadiPluginServer).GetTaskLockMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JackadiPlugin_GetTaskLockMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JackadiPluginServer).GetTaskLockMode(ctx, req.(*TaskLockModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JackadiPlugin_ServiceDesc is the grpc.ServiceDesc for JackadiPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JackadiPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protoplugin.JackadiPlugin",
	HandlerType: (*JackadiPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Name",
			Handler:    _JackadiPlugin_Name_Handler,
		},
		{
			MethodName: "Tasks",
			Handler:    _JackadiPlugin_Tasks_Handler,
		},
		{
			MethodName: "Help",
			Handler:    _JackadiPlugin_Help_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _JackadiPlugin_Version_Handler,
		},
		{
			MethodName: "Do",
			Handler:    _JackadiPlugin_Do_Handler,
		},
		{
			MethodName: "CollectSpecs",
			Handler:    _JackadiPlugin_CollectSpecs_Handler,
		},
		{
			MethodName: "GetTaskLockMode",
			Handler:    _JackadiPlugin_GetTaskLockMode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/plugin/core/protoplugin/plugin.proto",
}
